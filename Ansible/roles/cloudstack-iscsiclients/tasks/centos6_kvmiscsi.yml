- name: Open iptables for clustering
  shell: "iptables -I INPUT {{ item }}"
  with_items:
    - "-m state --state NEW -m multiport -p udp --dports 5404,5405 -j ACCEPT"
    - "-m addrtype --dst-type MULTICAST -m state --state NEW -m multiport -p udp --dports 5404,5405 -j ACCEPT"
    - "-m state --state NEW -p tcp --dport 21064 -j ACCEPT"
    - "-m state --state NEW -p tcp --dport 11111 -j ACCEPT"
    - "-m state --state NEW -p tcp --dport 8084 -j ACCEPT"
    - "-m state --state NEW -p tcp --dport 16851 -j ACCEPT"

- name: IPtables save
  shell: "service iptables save ; service iptables restart"

# iscsiadm -m discovery -t sendtargets -p {{ hostvars[groups['primary_storage_hosts_iscsi'][0]]['ansible_ssh_host'] }}
- name: log out of all previous iscsi sessions
  shell: iscsiadm -m session -u
  ignore_errors: yes

- name: Rewrite initiator
  shell: echo "InitiatorName="`/sbin/iscsi-iname` > /etc/iscsi/initiatorname.iscsi

- name: Restart iscsi
  service:
    name: "{{ item }}"
    state: restarted
  with_items:
    - iscsi
    - iscsid

- name: Discover iSCSI targets
  open_iscsi:
    show_nodes: yes
    discover: yes
    portal: "{{ hostvars[groups['primary_storage_hosts_iscsi'][0]]['ansible_ssh_host'] }}"

# iscsiadm -m node -T {{ env_iscsi_target }}:{{ env_uuid }} --login
- name: Login to iSCSI target
  open_iscsi:
    login: yes
    target: "{{ env_iscsi_target }}:{{ env_uuid }}"

- name: Check iscsi sessions
  shell: iscsiadm -m session
  register: iscsisessions

- name: Print sessions
  debug: msg={{ iscsisessions.stdout }}

- name: Install all CLVM prereqs
  yum: name={{ item }} state=present
  with_items:
    - lvm2-cluster
    - rgmanager
    - luci
    - ccs

- name: Start ricci and luci
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - ricci
    - luci

- name: Delete all previous clusters
  file:
    path="/etc/cluster/cluster.conf"
    state="absent"

- name: Reset ricci password
  shell: echo {{ kvm_password }} | passwd --stdin ricci

- name: Configure LVM for cluster disks
  shell: lvmconf --enable-cluster

# First node only
- block:
  - name: Create cluster
    shell: ccs -h {{ inventory_hostname }} --createcluster kvmcl1 -p {{ kvm_password }}

  - name: Add all nodes
    shell: ccs -h {{ inventory_hostname }} --addnode {{ item }} -p {{ kvm_password }}
    with_items:
      - "{{ groups['kvm_hosts'] }}"

  - name: Cover for 2 node clusters
    shell: ccs -h {{ inventory_hostname }} --setcman two_node=1 expected_votes=1 -p {{ kvm_password }}
    when: groups['mysql_hosts'] | length | int == 2

  - name: Fence daemon TBC
    shell: ccs -h {{ inventory_hostname }} --setfencedaemon {{ item }} -p {{ kvm_password }}
    with_items:
      - "post_fail_delay=0"
      - "post_join_delay=25"

  - name: Sync and activate
    shell: ccs -h {{ inventory_hostname }} --sync --activate -p {{ kvm_password }}

  when: inventory_hostname == "{{ groups['kvm_hosts'][0] }}"

- name: Start services all nodes
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - rgmanager
    - cman
    - clvmd

# First node only
- block:

  - name: Register all iscsi mounted disks
    shell: iscsiadm -m session -P3 | grep sd | cut -d ' ' -f 4 | cut -f 1 | grep -v sdb
    register: iscsiluns

  - name: Print all luns
    debug: msg="Lun detected {{ item }}"
    with_items:
      - "{{ iscsiluns.stdout_lines }}"
    ignore_errors: true

  - name: pvcreate all disks
    shell: pvcreate /dev/{{ item }}
    with_items:
      - "{{ iscsiluns.stdout_lines }}"
    ignore_errors: true

  - name: vgcreate all disks
    shell: vgcreate -cy {{ item.0 }} /dev/{{ item.1 }}
    with_together:
      - "{{ env_pripools }}"
      - "{{ iscsiluns.stdout_lines }}"
    ignore_errors: yes

  when: inventory_hostname == "{{ groups['kvm_hosts'][0] }}"
